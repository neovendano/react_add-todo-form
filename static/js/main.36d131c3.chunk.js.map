{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","components/TodoAddForm/TodoAddForm.tsx","utils.ts","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","classnames","TodoList","todos","map","validatorABC","TodoAddForm","users","onAdd","useState","setTitle","userId","setUserId","isTitleValid","setIsTitleValid","isUserIdValid","setIsUserIdValid","action","method","onSubmit","event","preventDefault","length","todoId","reduce","acc","Math","max","find","type","value","placeholder","onChange","target","replace","disabled","findUserById","usersFromServer","preparedTodos","App","setTodos","prevTodos","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.36d131c3.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\nimport './UserInfo.scss';\n\ninterface Props {\n  user: User,\n}\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classnames from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { PreparedTodo } from '../../types/PreparedTodo';\nimport './TodoInfo.scss';\n\ninterface Props {\n  todo: PreparedTodo,\n}\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classnames('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { PreparedTodo } from '../../types/PreparedTodo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: PreparedTodo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo) => (\n        <TodoInfo\n          todo={todo}\n          key={todo.id}\n          data-id={todo.id}\n        />\n      ))}\n    </section>\n  );\n};\n","import { useState } from 'react';\nimport { PreparedTodo } from '../../types/PreparedTodo';\nimport { User } from '../../types/User';\nimport './TodoAddForm.scss';\n\ninterface Props {\n  todos: PreparedTodo[],\n  users: User[],\n  onAdd: (todo: PreparedTodo) => void,\n}\n\nconst validatorABC = /[^a-zA-Zа-яА-Я0-9\\s]/g;\n\nexport const TodoAddForm: React.FC<Props> = ({ todos, users, onAdd }) => {\n  const [title, setTitle] = useState('');\n  const [userId, setUserId] = useState(0);\n\n  const [isTitleValid, setIsTitleValid] = useState(true);\n  const [isUserIdValid, setIsUserIdValid] = useState(true);\n\n  const handleTitleInput = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value.replace(validatorABC, ''));\n    setIsTitleValid(true);\n  };\n\n  const handleUserIdInput = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setUserId(+event.target.value);\n    setIsUserIdValid(true);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUserId(0);\n  };\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setIsTitleValid(!!title.length);\n    setIsUserIdValid(!!userId);\n\n    if (title.length && userId) {\n      const todoId = todos.reduce((acc, todo) => Math.max(acc, todo.id), 0);\n\n      onAdd({\n        id: todoId + 1,\n        title,\n        completed: false,\n        userId,\n        user: users\n          .find((user: User) => user.id === userId) ?? null,\n      });\n\n      resetForm();\n    }\n  };\n\n  return (\n    <form\n      action=\"/api/todos\"\n      method=\"POST\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"field\">\n        <input\n          id=\"title\"\n          type=\"text\"\n          data-cy=\"titleInput\"\n          value={title}\n          placeholder=\"Enter a title\"\n          onChange={handleTitleInput}\n        />\n\n        {!isTitleValid && (\n          <span className=\"error\">Please enter a title</span>\n        )}\n      </div>\n\n      <div className=\"field\">\n        <select\n          id=\"userId\"\n          data-cy=\"userSelect\"\n          value={userId}\n          onChange={handleUserIdInput}\n        >\n          <option value=\"0\" disabled>Choose a user</option>\n          {users.map(({ id, name }) => (\n            <option\n              value={id}\n              key={id}\n            >\n              {name}\n            </option>\n          ))}\n        </select>\n\n        {!isUserIdValid && (\n          <span className=\"error\">Please choose a user</span>\n        )}\n      </div>\n\n      <button type=\"submit\" data-cy=\"submitButton\">\n        Add\n      </button>\n    </form>\n  );\n};\n","import { User } from './types/User';\n\nexport function findUserById(id: number, usersFromServer: User[]): User | null {\n  return usersFromServer.find(user => user.id === id) ?? null;\n}\n","import './App.scss';\n\nimport { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { PreparedTodo } from './types/PreparedTodo';\nimport { Todo } from './types/Todo';\nimport { TodoList } from './components/TodoList';\nimport { TodoAddForm } from './components/TodoAddForm';\nimport { findUserById } from './utils';\n\nconst preparedTodos: PreparedTodo[] = todosFromServer\n  .map((todo: Todo) => {\n    return {\n      ...todo,\n      user: findUserById(todo.userId, usersFromServer),\n    };\n  });\n\nexport const App = () => {\n  const [todos, setTodos] = useState(preparedTodos);\n\n  const handleAddTodo = (todo: PreparedTodo): void => {\n    setTodos((prevTodos) => [...prevTodos, todo]);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <TodoAddForm\n        todos={todos}\n        users={usersFromServer}\n        onAdd={handleAddTodo}\n      />\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}